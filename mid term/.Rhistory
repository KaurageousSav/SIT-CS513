midtermq4_notmissing[midtermq4_notmissing$MonthlyIncome<3000,"MonthlyIncome"]<-"<3000"
midtermq4_notmissing[midtermq4_notmissing$MonthlyIncome>=3000 & midtermq4_notmissing$MonthlyIncome<5000,"MonthlyIncome"]<-"=>3000-<5000"
midtermq4_notmissing[midtermq4_notmissing$MonthlyIncome>=5000 & midtermq4_notmissing$MonthlyIncome<8500,"MonthlyIncome"]<-"=>5000-<8500"
midtermq4_notmissing[midtermq4_notmissing$MonthlyIncome>=8500 & midtermq4_notmissing$MonthlyIncome<20000,"MonthlyIncome"]<-"=>8500"
View(midtermq4_notmissing)
rm(list=ls())
#Importing csv to r
midtermq4 <- read.csv("IBM_attrition_v2.CSV", header = TRUE, sep = ",", na.strings = c("?"))
midtermq4
#Remove Missing Values
midtermq4_notmissing<-na.omit(midtermq4)
#categorizing MonthlyIncome
midtermq4_notmissing[midtermq4_notmissing$MonthlyIncome<3000,"MonthlyIncome"]<-"<3000"
midtermq4_notmissing[midtermq4_notmissing$MonthlyIncome>=3000 & midtermq4_notmissing$MonthlyIncome<5000,"MonthlyIncome"]<-"=>3000-<5000"
midtermq4_notmissing[midtermq4_notmissing$MonthlyIncome>=5000 & midtermq4_notmissing$MonthlyIncome<8500,"MonthlyIncome"]<-"=>5000-<8500"
midtermq4_notmissing[midtermq4_notmissing$MonthlyIncome>8500,"MonthlyIncome"]<-"=>8500"
View(midtermq4_notmissing)
rm(list=ls())
install.packages("e1071")
library(e1071)
library(class)
install.packages("e1071")
#Importing csv to r
midtermq4 <- read.csv("IBM_attrition_v2.CSV", header = TRUE, sep = ",", na.strings = c("?"))
midtermq4
#Remove Missing Values
midtermq4_notmissing<-na.omit(midtermq4)
for(i in seq(from=1, to=nrow(midtermq4_notmissing), by=1))
{
if(midtermq4_notmissing$MonthlyIncome[i] < 3000)
{
midtermq4_notmissing$MonthlyIncome [i] <- "up to 3000";
}
else if(midtermq4_notmissing$MonthlyIncome[i] >= 3000 && midtermq4_notmissing$MonthlyIncome[i] < 5000)
{
midtermq4_notmissing$MonthlyIncome [i] <- "3000 up to 5,000.00";
}
else if(midtermq4_notmissing$MonthlyIncome[i] >= 5000 && midtermq4_notmissing$MonthlyIncome[i] < 8500)
{
midtermq4_notmissing$MonthlyIncome [i] <- "5000 up to 8,500";
}
if(midtermq4_notmissing$MonthlyIncome[i] >= 8500)
{
midtermq4_notmissing$MonthlyIncome [i] <- "8500 or more";
}
}
midtermq4_notmissing
midtermq4_notmissing[midtermq4_notmissing$Age<31,"Age"]<-"<31"
midtermq4_notmissing[midtermq4_notmissing$Age>=31 & midtermq4_notmissing$Age<38,"Age"]<-"31-38"
midtermq4_notmissing[midtermq4_notmissing$Age>=38 & midtermq4_notmissing$Age<=48,"Age"]<-"38-48"
midtermq4_notmissing[midtermq4_notmissing$Age>48,"Age"]<-">48"
View(midtermq4_notmissing)
#removing MonthlyIncome and age column
midtermq4_notmissing = subset(midtermq4_notmissing, select = -c(MonthlyIncome, Age))
midtermq4_notmissing
rm(list=ls())
#Importing csv to r
midtermq4 <- read.csv("IBM_attrition_v2.CSV", header = TRUE, sep = ",", na.strings = c("?"))
midtermq4
#Remove Missing Values
midtermq4_notmissing<-na.omit(midtermq4)
for(i in seq(from=1, to=nrow(midtermq4_notmissing), by=1))
{
if(midtermq4_notmissing$MonthlyIncome[i] < 3000)
{
midtermq4_notmissing$MonthlyIncome [i] <- "up to 3000";
}
else if(midtermq4_notmissing$MonthlyIncome[i] >= 3000 && midtermq4_notmissing$MonthlyIncome[i] < 5000)
{
midtermq4_notmissing$MonthlyIncome [i] <- "3000 up to 5,000.00";
}
else if(midtermq4_notmissing$MonthlyIncome[i] >= 5000 && midtermq4_notmissing$MonthlyIncome[i] < 8500)
{
midtermq4_notmissing$MonthlyIncome [i] <- "5000 up to 8,500";
}
if(midtermq4_notmissing$MonthlyIncome[i] >= 8500)
{
midtermq4_notmissing$MonthlyIncome [i] <- "8500 or more";
}
}
#categorizing Age
midtermq4_notmissing[midtermq4_notmissing$Age<31,"Age"]<-"<31"
midtermq4_notmissing[midtermq4_notmissing$Age>=31 & midtermq4_notmissing$Age<38,"Age"]<-"31-38"
midtermq4_notmissing[midtermq4_notmissing$Age>=38 & midtermq4_notmissing$Age<=48,"Age"]<-"38-48"
midtermq4_notmissing[midtermq4_notmissing$Age>48,"Age"]<-">48"
View(midtermq4_notmissing)
#factoring remaining column
midtermq4_notmissing$Attrition <- factor(midtermq4_notmissing$Attrition, labels = c("yes","no"))
midtermq4_notmissing
is.factor(midtermq4_notmissing$Attrition)
#splitting training and test data
cst <- sort(sample(nrow(midtermq4_notmissing),as.integer(.70*nrow(midtermq4_notmissing))))
training <- midtermq4_notmissing[cst,]
test <- midtermq4_notmissing[-cst,]
nBayes_class <- naiveBayes(formula = Attrition~., data =training)
rm(list=ls())
install.packages("e1071")
library(e1071)
library(class)
#Importing csv to r
midtermq4 <- read.csv("IBM_attrition_v2.CSV", header = TRUE, sep = ",", na.strings = c("?"))
midtermq4
midtermq4_notmissing<-na.omit(midtermq4)
for(i in seq(from=1, to=nrow(midtermq4_notmissing), by=1))
{
if(midtermq4_notmissing$MonthlyIncome[i] < 3000)
{
midtermq4_notmissing$MonthlyIncome [i] <- "up to 3000";
}
else if(midtermq4_notmissing$MonthlyIncome[i] >= 3000 && midtermq4_notmissing$MonthlyIncome[i] < 5000)
{
midtermq4_notmissing$MonthlyIncome [i] <- "3000 up to 5,000.00";
}
else if(midtermq4_notmissing$MonthlyIncome[i] >= 5000 && midtermq4_notmissing$MonthlyIncome[i] < 8500)
{
midtermq4_notmissing$MonthlyIncome [i] <- "5000 up to 8,500";
}
if(midtermq4_notmissing$MonthlyIncome[i] >= 8500)
{
midtermq4_notmissing$MonthlyIncome [i] <- "8500 or more";
}
}
#categorizing Age
midtermq4_notmissing[midtermq4_notmissing$Age<31,"Age"]<-"<31"
midtermq4_notmissing[midtermq4_notmissing$Age>=31 & midtermq4_notmissing$Age<38,"Age"]<-"31-38"
midtermq4_notmissing[midtermq4_notmissing$Age>=38 & midtermq4_notmissing$Age<=48,"Age"]<-"38-48"
midtermq4_notmissing[midtermq4_notmissing$Age>48,"Age"]<-">48"
View(midtermq4_notmissing)
#factoring remaining column
midtermq4_notmissing$Attrition <- factor(midtermq4_notmissing$Attrition, labels = c("yes","no"))
midtermq4_notmissing
is.factor(midtermq4_notmissing$Attrition)
#splitting training and test data
cst <- sort(sample(nrow(midtermq4_notmissing),as.integer(.70*nrow(midtermq4_notmissing))))
training <- midtermq4_notmissing[cst,]
test <- midtermq4_notmissing[-cst,]
nBayes_class <- naiveBayes(formula = Attrition~., data =training)
category_class<-predict(nBayes_class,test)
a4 <-table(NBayes=category_class,Class=test$Attrition)
a4
NB_wrong<-sum(category_class!=test$Attrition)
#Accuracy
accuracy_a4 <- {sum(diag(a4)/(sum(rowSums(a4)))) * 100}
accuracy_a4
#calculating error rate
NB_error_rate<-NB_wrong/length(category_class)
NB_error_rate
rm(list=ls())
library(rpart)
library(rpart.plot)  			# Enhanced tree plots
library(rattle)           # Fancy tree plot
library(RColorBrewer)     # colors needed for rattle
#Importing csv to r
midtermq5 <- read.csv("IBM_attrition_v2.CSV", header = TRUE, sep = ",", na.strings = c("?"))
midtermq5
midtermq5_notmissing<-na.omit(midtermq5)
nrow(midtermq5_notmissing)
for(i in seq(from=1, to=nrow(midtermq5_notmissing), by=1))
{
if(midtermq5_notmissing$MonthlyIncome[i] < 3000)
{
midtermq5_notmissing$MonthlyIncome [i] <- "up to 3000";
}
else if(midtermq5_notmissing$MonthlyIncome[i] >= 3000 && midtermq5_notmissing$MonthlyIncome[i] < 5000)
{
midtermq5_notmissing$MonthlyIncome [i] <- "3000 up to 5,000.00";
}
else if(midtermq5_notmissing$MonthlyIncome[i] >= 5000 && midtermq5_notmissing$MonthlyIncome[i] < 8500)
{
midtermq5_notmissing$MonthlyIncome [i] <- "5000 up to 8,500";
}
if(midtermq5_notmissing$MonthlyIncome[i] >= 8500)
{
midtermq5_notmissing$MonthlyIncome [i] <- "8500 or more";
}
}
#categorizing Age
midtermq5_notmissing[midtermq5_notmissing$Age<31,"Age"]<-"<31"
midtermq5_notmissing[midtermq5_notmissing$Age>=31 & midtermq5_notmissing$Age<38,"Age"]<-"31-38"
midtermq5_notmissing[midtermq5_notmissing$Age>=38 & midtermq5_notmissing$Age<=48,"Age"]<-"38-48"
midtermq5_notmissing[midtermq5_notmissing$Age>48,"Age"]<-">48"
View(midtermq5_notmissing)
#get same data
set.seed(111)
#factoring remaining column
midtermq5_notmissing$Attrition= factor(midtermq5_notmissing$Attrition, labels = c("yes","no"))
midtermq5_notmissing
is.factor(midtermq5_notmissing$Attrition)
#splitting training and test data
cst <- sort(sample(nrow(midtermq5_notmissing),as.integer(.70*nrow(midtermq5_notmissing))))
training <- midtermq5_notmissing[cst,]
nrow(training)
test <- midtermq5_notmissing[-cst,]
nrow(test)
#Growing the tree
dev.off()
#plot the tree
CART_class<-rpart(Attrition~.,data=training, method = "class", na.action = na.rpart)
rpart.plot(CART_class)
summary(CART_class)
CART_predict2<-predict(CART_class, test[4,], type="class")
a <-table(Actual=test[4,]$Attrition,CART=CART_predict2) #diagonals are misclassified
a
#Percentage accuracy
match<-(test[4,]$Attrition==CART_predict2)*100
accuracy<-sum(match)/length(match)
accuracy
rm(list=ls())
library(rpart)
library(rpart.plot)  			# Enhanced tree plots
library(rattle)           # Fancy tree plot
library(RColorBrewer)     # colors needed for rattle
#Importing csv to r
midtermq5 <- read.csv("IBM_attrition_v2.CSV", header = TRUE, sep = ",", na.strings = c("?"))
midtermq5
#Remove Missing Values
midtermq5_notmissing<-na.omit(midtermq5)
nrow(midtermq5_notmissing)
for(i in seq(from=1, to=nrow(midtermq5_notmissing), by=1))
{
if(midtermq5_notmissing$MonthlyIncome[i] < 3000)
{
midtermq5_notmissing$MonthlyIncome [i] <- "up to 3000";
}
else if(midtermq5_notmissing$MonthlyIncome[i] >= 3000 && midtermq5_notmissing$MonthlyIncome[i] < 5000)
{
midtermq5_notmissing$MonthlyIncome [i] <- "3000 up to 5,000.00";
}
else if(midtermq5_notmissing$MonthlyIncome[i] >= 5000 && midtermq5_notmissing$MonthlyIncome[i] < 8500)
{
midtermq5_notmissing$MonthlyIncome [i] <- "5000 up to 8,500";
}
if(midtermq5_notmissing$MonthlyIncome[i] >= 8500)
{
midtermq5_notmissing$MonthlyIncome [i] <- "8500 or more";
}
}
#categorizing Age
midtermq5_notmissing[midtermq5_notmissing$Age<31,"Age"]<-"<31"
midtermq5_notmissing[midtermq5_notmissing$Age>=31 & midtermq5_notmissing$Age<38,"Age"]<-"31-38"
midtermq5_notmissing[midtermq5_notmissing$Age>=38 & midtermq5_notmissing$Age<=48,"Age"]<-"38-48"
midtermq5_notmissing[midtermq5_notmissing$Age>48,"Age"]<-">48"
View(midtermq5_notmissing)
#get same data
set.seed(111)
#factoring remaining column
midtermq5_notmissing$Attrition= factor(midtermq5_notmissing$Attrition, labels = c("yes","no"))
midtermq5_notmissing
is.factor(midtermq5_notmissing$Attrition)
#splitting training and test data
cst <- sort(sample(nrow(midtermq5_notmissing),as.integer(.70*nrow(midtermq5_notmissing))))
training <- midtermq5_notmissing[cst,]
nrow(training)
test <- midtermq5_notmissing[-cst,]
nrow(test)
#Growing the tree
dev.off()
CART_class<-rpart(Attrition~.,data=training)
rpart.plot(CART_class)
summary(CART_class)
CART_predict2<-predict(CART_class, test, type="class")
a <-table(Actual=test$Attrition,CART=CART_predict2) #diagonals are misclassified
a
match<-(test$Attrition==CART_predict2)*100
accuracy<-sum(match)/length(match)
accuracy
wrong<- sum(test$Attrition!=CART_predict2)
c_rate<-wrong/length(test$Attrition)
c_rate
prp(CART_class)
fancyRpartPlot(CART_class)
rm(list=ls())
setwd("~/Desktop/SIT/kdd/Savleen/mid term")
midtermq6 <- read.csv("IBM_attrition_v2.csv", header = TRUE, na.strings = c("?"))
midtermq6
#Remove Missing Values
midtermq6_notmissing<-na.omit(midtermq6)
#Convert Class Column to Factor
midtermq6_notmissing$Attrition <- factor(midtermq6_notmissing$Attrition, labels = c("yes","no"))
midtermq6_notmissing
is.factor(midtermq6_notmissing$Attrition)
#30% test data & 70% training data
idx<-sort(sample(nrow(midtermq6_notmissing),as.integer(.70*nrow(midtermq6_notmissing))))
idx
training<-midtermq6_notmissing[idx,]
nrow(training)
test<-midtermq6_notmissing[-idx,]
nrow(test)
#Use the R library("kknn")
library(kknn)
#when the value of k=3
predict_k3<-kknn(formula = Attrition~., training, test, k=3, kernel = "triangular")
fit <- fitted(predict_k3)
n3 <- table(Actual=test$Attrition,Fitted=fit)
n3
#Accuracy
accuracy_k3 <- {sum(diag(n3)/(sum(rowSums(n3)))) * 100}
accuracy_k3
rm(list=ls())
#Importing csv to r
midterm <- read.csv("IBM_Attrition_v3.csv", header = TRUE, sep = ",", na.strings = c("?"))
midterm
#I. Summarizing each column (e.g. min, max, mean )
summary(midterm)
File1 <- data.frame(midterm)
File1
is.na(midterm)
#II. Identifying missing values
NAdata<-File1[which(is.na(midterm[4])),]
View(NAdata)
print('Total number of missing values:')
nrow(NAdata)
#III. Replacing the numerical missing values with the “mean” of the corresponding columns
WithoutNA <-midterm[-which(is.na(midterm['MonthlyIncome'])),]
WithoutNA
meanwithNA <-mean(midterm$MonthlyIncome, na.rm = TRUE)
midterm[is.na(midterm)] <-meanwithNA
print(midterm)
Scatterplit_df <- data.frame(midterm['Age'], midterm['MonthlyIncome'], midterm['YearsAtCompany'])
scatterplot<-plot(Scatterplit_df[1:3],  main="Scatterplot for IBM_attrition", pch=10, col = "orange")
boxplot(midterm[c(1,4,5)], main='Box Plot for “Age”, “MonthlyIncome”, and “YearsAtCompany”', col=rgb(0,0.8,1,alpha = 0.5))
#IV. Displaying the scatter plot of “Age”, “MonthlyIncome” and “YearsAtCompany”, one pair at a time
Scatterplit_df <- data.frame(midterm['Age'], midterm['MonthlyIncome'], midterm['YearsAtCompany'])
scatterplot<-plot(Scatterplit_df[1:3],  main="Scatterplot for IBM_attrition", pch=10, col = "orange")
boxplot(midterm[c(1,4,5)], main='Box Plot for “Age”, “MonthlyIncome”, and “YearsAtCompany”', col=rgb(0,0.8,1,alpha = 0.5))
rm(list=ls())
install.packages("e1071")
library(e1071)
library(class)
install.packages("e1071")
#Importing csv to r
midtermq4 <- read.csv("IBM_attrition_v2.CSV", header = TRUE, sep = ",", na.strings = c("?"))
midtermq4
#Remove Missing Values
midtermq4_notmissing<-na.omit(midtermq4)
midtermq4_notmissing
for(i in seq(from=1, to=nrow(midtermq4_notmissing), by=1))
{
if(midtermq4_notmissing$MonthlyIncome[i] < 3000)
{
midtermq4_notmissing$MonthlyIncome [i] <- "up to 3000";
}
else if(midtermq4_notmissing$MonthlyIncome[i] >= 3000 && midtermq4_notmissing$MonthlyIncome[i] < 5000)
{
midtermq4_notmissing$MonthlyIncome [i] <- "3000 up to 5,000.00";
}
else if(midtermq4_notmissing$MonthlyIncome[i] >= 5000 && midtermq4_notmissing$MonthlyIncome[i] < 8500)
{
midtermq4_notmissing$MonthlyIncome [i] <- "5000 up to 8,500";
}
if(midtermq4_notmissing$MonthlyIncome[i] >= 8500)
{
midtermq4_notmissing$MonthlyIncome [i] <- "8500 or more";
}
}
#categorizing Age
midtermq4_notmissing[midtermq4_notmissing$Age<31,"Age"]<-"<31"
midtermq4_notmissing[midtermq4_notmissing$Age>=31 & midtermq4_notmissing$Age<38,"Age"]<-"31-38"
midtermq4_notmissing[midtermq4_notmissing$Age>=38 & midtermq4_notmissing$Age<=48,"Age"]<-"38-48"
midtermq4_notmissing[midtermq4_notmissing$Age>48,"Age"]<-">48"
View(midtermq4_notmissing)
#factoring remaining column
midtermq4_notmissing$Attrition <- factor(midtermq4_notmissing$Attrition, labels = c("yes","no"))
midtermq4_notmissing
is.factor(midtermq4_notmissing$Attrition)
#splitting training and test data
cst <- sort(sample(nrow(midtermq4_notmissing),as.integer(.70*nrow(midtermq4_notmissing))))
training <- midtermq4_notmissing[cst,]
test <- midtermq4_notmissing[-cst,]
# Naive Bayes classification
nBayes_class <- naiveBayes(formula = Attrition~., data =training)
category_class<-predict(nBayes_class,test)
install.packages("e1071")
library(e1071)
library(class)
#Importing csv to r
midtermq4 <- read.csv("IBM_attrition_v2.CSV", header = TRUE, sep = ",", na.strings = c("?"))
midtermq4
midtermq4_notmissing<-na.omit(midtermq4)
for(i in seq(from=1, to=nrow(midtermq4_notmissing), by=1))
{
if(midtermq4_notmissing$MonthlyIncome[i] < 3000)
{
midtermq4_notmissing$MonthlyIncome [i] <- "up to 3000";
}
else if(midtermq4_notmissing$MonthlyIncome[i] >= 3000 && midtermq4_notmissing$MonthlyIncome[i] < 5000)
{
midtermq4_notmissing$MonthlyIncome [i] <- "3000 up to 5,000.00";
}
else if(midtermq4_notmissing$MonthlyIncome[i] >= 5000 && midtermq4_notmissing$MonthlyIncome[i] < 8500)
{
midtermq4_notmissing$MonthlyIncome [i] <- "5000 up to 8,500";
}
if(midtermq4_notmissing$MonthlyIncome[i] >= 8500)
{
midtermq4_notmissing$MonthlyIncome [i] <- "8500 or more";
}
}
#categorizing Age
midtermq4_notmissing[midtermq4_notmissing$Age<31,"Age"]<-"<31"
midtermq4_notmissing[midtermq4_notmissing$Age>=31 & midtermq4_notmissing$Age<38,"Age"]<-"31-38"
midtermq4_notmissing[midtermq4_notmissing$Age>=38 & midtermq4_notmissing$Age<=48,"Age"]<-"38-48"
midtermq4_notmissing[midtermq4_notmissing$Age>48,"Age"]<-">48"
View(midtermq4_notmissing)
midtermq4_notmissing$Attrition <- factor(midtermq4_notmissing$Attrition, labels = c("yes","no"))
midtermq4_notmissing
is.factor(midtermq4_notmissing$Attrition)
cst <- sort(sample(nrow(midtermq4_notmissing),as.integer(.70*nrow(midtermq4_notmissing))))
training <- midtermq4_notmissing[cst,]
test <- midtermq4_notmissing[-cst,]
# Naive Bayes classification
nBayes_class <- naiveBayes(formula = Attrition~., data =training)
category_class<-predict(nBayes_class,test)
a4 <-table(NBayes=category_class,Class=test$Attrition)
a4
NB_wrong<-sum(category_class!=test$Attrition)
#Accuracy
accuracy_a4 <- {sum(diag(a4)/(sum(rowSums(a4)))) * 100}
accuracy_a4
#calculating error rate
NB_error_rate<-NB_wrong/length(category_class)
NB_error_rate
rm(list=ls())
library(rpart)
library(rpart.plot)  			# Enhanced tree plots
library(rattle)           # Fancy tree plot
library(RColorBrewer)     # colors needed for rattle
#Importing csv to r
midtermq5 <- read.csv("IBM_attrition_v2.CSV", header = TRUE, sep = ",", na.strings = c("?"))
midtermq5
#Remove Missing Values
midtermq5_notmissing<-na.omit(midtermq5)
nrow(midtermq5_notmissing)
for(i in seq(from=1, to=nrow(midtermq5_notmissing), by=1))
{
if(midtermq5_notmissing$MonthlyIncome[i] < 3000)
{
midtermq5_notmissing$MonthlyIncome [i] <- "up to 3000";
}
else if(midtermq5_notmissing$MonthlyIncome[i] >= 3000 && midtermq5_notmissing$MonthlyIncome[i] < 5000)
{
midtermq5_notmissing$MonthlyIncome [i] <- "3000 up to 5,000.00";
}
else if(midtermq5_notmissing$MonthlyIncome[i] >= 5000 && midtermq5_notmissing$MonthlyIncome[i] < 8500)
{
midtermq5_notmissing$MonthlyIncome [i] <- "5000 up to 8,500";
}
if(midtermq5_notmissing$MonthlyIncome[i] >= 8500)
{
midtermq5_notmissing$MonthlyIncome [i] <- "8500 or more";
}
}
#categorizing Age
midtermq5_notmissing[midtermq5_notmissing$Age<31,"Age"]<-"<31"
midtermq5_notmissing[midtermq5_notmissing$Age>=31 & midtermq5_notmissing$Age<38,"Age"]<-"31-38"
midtermq5_notmissing[midtermq5_notmissing$Age>=38 & midtermq5_notmissing$Age<=48,"Age"]<-"38-48"
midtermq5_notmissing[midtermq5_notmissing$Age>48,"Age"]<-">48"
View(midtermq5_notmissing)
#get same data
set.seed(111)
#factoring remaining column
midtermq5_notmissing$Attrition= factor(midtermq5_notmissing$Attrition, labels = c("yes","no"))
midtermq5_notmissing
is.factor(midtermq5_notmissing$Attrition)
#splitting training and test data
cst <- sort(sample(nrow(midtermq5_notmissing),as.integer(.70*nrow(midtermq5_notmissing))))
training <- midtermq5_notmissing[cst,]
nrow(training)
test <- midtermq5_notmissing[-cst,]
nrow(test)
#Growing the tree
dev.off()
CART_class<-rpart(Attrition~.,data=training)
rpart.plot(CART_class)
summary(CART_class)
CART_predict2<-predict(CART_class, test, type="class")
a <-table(Actual=test$Attrition,CART=CART_predict2) #diagonals are misclassified
a
match<-(test$Attrition==CART_predict2)*100
accuracy<-sum(match)/length(match)
accuracy
#error rate
wrong<- sum(test$Attrition!=CART_predict2)
c_rate<-wrong/length(test$Attrition)
c_rate
prp(CART_class)
fancyRpartPlot(CART_class)
rm(list=ls())
#Importing csv to r
midtermq6 <- read.csv("IBM_attrition_v2.csv", header = TRUE, na.strings = c("?"))
midtermq6
midtermq6_notmissing<-na.omit(midtermq6)
midtermq6_notmissing$Attrition <- factor(midtermq6_notmissing$Attrition, labels = c("yes","no"))
midtermq6_notmissing
is.factor(midtermq6_notmissing$Attrition)
#30% test data & 70% training data
idx<-sort(sample(nrow(midtermq6_notmissing),as.integer(.70*nrow(midtermq6_notmissing))))
idx
training<-midtermq6_notmissing[idx,]
nrow(training)
test<-midtermq6_notmissing[-idx,]
nrow(test)
#Use the R library("kknn")
library(kknn)
#when the value of k=3
predict_k3<-kknn(formula = Attrition~., training, test, k=3, kernel = "triangular")
fit <- fitted(predict_k3)
n3 <- table(Actual=test$Attrition,Fitted=fit)
n3
#Accuracy
accuracy_k3 <- {sum(diag(n3)/(sum(rowSums(n3)))) * 100}
accuracy_k3
